name: Linting and Test

on:
  pull_request:
    branches:
    - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      # Check-out repo and set-up python
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}

      # Install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Do the actuall checks and run tests
      - name: Lint check
        run: |
          make lint

      - name: Run Tests with Coverage
        run: |
          poetry run coverage run -m pytest -vv
          poetry run coverage report -m
          poetry run coverage xml
        env:
          COVERAGE_FILE: coverage.xml

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v2
        with:
          file: coverage.xml
          flags: unittests
        if: success()
