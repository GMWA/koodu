from typing import List

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from {{ full_model.name.lower() }}.dependencies import get_db
from {{ full_model.name.lower() }}.models import {{ mod }} as {{ mod }}Model
from {{ full_model.name.lower() }}.schemas.categories import {{ mod }} as {{ mod }}Schema
from {{ full_model.name.lower() }}.schemas.categories import {{ mod }}Create

router = APIRouter(
    prefix="/categories",
    tags=["categories"],
    responses={404: {"description": "Not found"}},
)


@router.get(
    "/",
    response_model=List[{{ mod }}Schema],
    responses={403: {"description": "Operation forbidden"}},
)
def read_categories(db: Session = Depends(get_db)):
    categories = db.query({{ mod }}Model).all()
    return list(map(lambda cat: cat.to_dict(), categories))


@router.get(
    "/'{'{{ mod.lower() }}_id '}'",
    response_model={{ mod }}Schema,
    responses='{' 403: '{' "description": "Operation forbidden"'}}',
)
def get_{{ mod.lower() }}({{ mod.lower() }}_id: int, db: Session = Depends(get_db)):
    {{ mod.lower() }} = db.query({{ mod }}Model).filter_by(id={{ mod.lower() }}_id).first()
    if not {{ mod.lower() }}:
        raise HTTPException(404, "{{ mod.lower() }} Not Found!")
    else:
        return {{ mod.lower() }}.to_dict()


@router.post(
    "/",
    response_model={{ mod }}Schema,
    responses='{'403: '{'"description": "Operation forbidden"'}}',
)
def create_{{ mod.lower() }}({{ mod.lower() }}: {{ mod }}Create, db: Session = Depends(get_db)):
    try:
        {{ mod.lower() }} = db.query({{ mod }}Model).filter_by(name={{ mod }}.name).first()
        if {{ mod.lower() }}:
            raise HTTPException(400, "{{ mod.lower() }} already exists")
        db_{{ mod.lower() }} = {{ mod.lower() }}Model(**{{ mod.lower() }}.dict())
        db.add(db_{{ mod.lower() }})
        db.commit()
        db.refresh(db_{{ mod.lower() }})
        return db_{{ mod.lower() }}.to_dict()
    except Exception as exc:
        raise HTTPException(500, f"Server Error {exc}!")