{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Koodu, simple code generator engine written in python. </p> <p> </p> <p>Documentation: https://gmwa.github.io/koodu/</p> <p>Source Code: https://github.com/GMWA/koodu</p> <p>Koodu is simple and lightweight code generator engine written in python.</p>"},{"location":"#goal","title":"Goal","text":"<p>Koodu allows you to quickly generate project or file boilerplates, enabling developers to save time by focusing on the most complex features of their software.</p>"},{"location":"#principe","title":"Principe","text":"<p>Write a template once and use it as many times as possible to generate code based on a model.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python     &gt;= 3.8</li> <li>pyyaml     &gt;= 6.0.1</li> <li>jinja2     &gt;= 3.1.2</li> <li>Pydantic   &gt;= 1.10.9</li> </ul> <p>The installation can be done using both <code>pip</code> and also using <code>the source code</code>.</p>"},{"location":"#installation-with-pip","title":"Installation with pip","text":"<pre><code>$ pip install koodu\n</code></pre>"},{"location":"#installation-with-the-source-code","title":"Installation with the source code","text":"<pre><code>$ git clone https://gmwa.github.io/koodu\n$ cd koodu\n$ pip install -e\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#using-as-cli-tool","title":"using as CLI tool","text":"<p>generate code using a template and et model</p> <pre><code>$ koodu generate -t fastapi -m koodu/models/blog.json -o ./examples/blog\n</code></pre>"},{"location":"#using-as-python-package","title":"using as Python package","text":"<p>koodu can be used as python library as follows:</p> <pre><code>import json\nfrom pathlib import Path\nfrom koodu.generator import Generator\n\nwith open(Path(\"./koodu/models/blog.json\"), \"r\", encoding=\"utf-8\") as fp:\n    model = json.loads(fp.read())\n\ntemplate_path = Path(\"./koodu/templates/fastapi\")\noutput_path = Path(\"./examples/blog\")\ngenerator = Generator(\n    model=model,\n    template_folder=template_path,\n    output=Path(args.output)\n)\n\nfor file in generator.render():\n    file.write()\n</code></pre>"},{"location":"#notes","title":"Notes","text":"<ul> <li> <p>The examples above use the template provided by koodu for generating backend applications with the FastAPI framework. The applications generated using this template are functional and have endpoints to enable users to create, modify and delete resources.</p> </li> <li> <p>koodu also comes with other templates for generating applications based on other frameworks such as Django, Flask or ExpressJS. You can also use it with your own templates by providing their path.</p> </li> </ul>"},{"location":"#convention-for-koodu-templating","title":"Convention for koodu templating.","text":""},{"location":"CHANGELOG/","title":"Change logs","text":""},{"location":"CHANGELOG/#005","title":"0.0.5","text":"<ul> <li>Update pydantic version to &gt;= 2.7.3</li> <li>Update django version to &gt;= 4.2.15</li> <li>Update fastapi's template to use pydantic &gt;= 2.7.3</li> <li>Update django's template to use django &gt;= 4.2.15</li> </ul>"},{"location":"CHANGELOG/#003","title":"0.0.3","text":"<ul> <li>Implement pydantic models validations</li> <li>Tests for pydantics models</li> <li>Enums for availabe types and available templates</li> <li>Fix some bugs on the django templates</li> </ul>"},{"location":"CHANGELOG/#002","title":"0.0.2","text":"<ul> <li>FastApi Templates: Add new template for Makefile, Readme and Docker</li> <li>use pydantic for type validation</li> <li>Fix generationg file without extension e.g Makefile</li> <li>move tests templates to tests folder</li> <li>Add separate ci to build and deploy docs</li> </ul>"},{"location":"CHANGELOG/#001","title":"0.0.1","text":"<ul> <li>Initial Version</li> <li>Write the Generator</li> <li>Write the cli tool</li> <li>FastApi Template</li> <li>Flask Template</li> </ul>"},{"location":"generator/","title":"Koodu Generator","text":"<p>The generator is the core of koodu. It generates code from a template(or a list of template) and a model model.</p> <p>The template provides the structure for the code to be generated, i.e. the different files (their path and contents) in the files to be generated.</p> <p>The model defines the data that the templates will use to generate these files.</p> <p>The generator can be used both as a python module and as a cli tools.</p>"},{"location":"generator/#generator-as-python-module","title":"Generator as python module","text":"<p>To use the generator as python module users can just import the module ans use the deffirent provided method. following is ans example.</p> <pre><code>import json\nfrom pathlib import Path\nfrom koodu.generator import Generator\n\nwith open(Path(\"./koodu/models/blog.json\"), \"r\", encoding=\"utf-8\") as fp:\n    model = json.loads(fp.read())\n\ntemplate_path = Path(\"./koodu/templates/fastapi\")\noutput_path = Path(\"./examples/blog\")\ngenerator = Generator(\n    model=model,\n    template_folder=template_path,\n    output=Path(args.output)\n)\n\nfor file in generator.render():\n    file.write()\n</code></pre>"},{"location":"generator/#generator-as-cli-tool","title":"Generator as cli tool","text":"<p>This is the method we recommend for using koodu because it's quick and efficient. Once koodu is installed, all you have to do is use the koodu command with its various options. The current version of koodu has two main options <code>generate</code> and <code>list</code>:</p>"},{"location":"generator/#koodu-generate","title":"koodu generate","text":"<p>This option is used to generate the code. it requires the following:parameters:</p> <ul> <li>-t path to template</li> <li>-m path to model</li> <li>-o output path</li> </ul> <pre><code>$ koodu list models\n</code></pre>"},{"location":"generator/#koodu-list","title":"koodu list","text":"<p>This option can be used to list the available templates or module.</p>"},{"location":"generator/#list-the-available-templates","title":"List the available templates","text":"<pre><code>$ koodu list templates\n</code></pre>"},{"location":"generator/#list-the-available-models","title":"List the available models","text":"<pre><code>$ koodu list models\n</code></pre>"},{"location":"generator/#list-the-available-models_1","title":"List the available models","text":"<pre><code>$ koodu check models\n</code></pre>"},{"location":"templates/","title":"Available Templates","text":"<p>When installed, koodu also contains a series of templates that can be used to generate code for web applications based on a number of well-known frameworks.</p>"},{"location":"templates/#fastapi-template","title":"FastApi Template","text":"<p>With our FastApi template users are able to generate projects with the following structure:</p> <pre><code>output/\n\u251c\u2500\u2500 project_name\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 routers/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 *.py\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 *.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <ul> <li><code>models.py</code>: contains de definition of our models.</li> <li><code>manage.py</code>: This is a cli tool to manage database migration in app.</li> <li>The <code>routers</code>: folder contains differents python file(one for each resource) and each file contains the differents endpoint(CRUD) implementation for the ressource.</li> <li>The <code>schemas</code>: folder contains differents python file(one for each resource) and each file contains the Schemas definitions for that ressource.</li> <li><code>Dokerfile</code>: the Dockerfile manifest to build the app as docker image.</li> </ul>"},{"location":"templates/#the-generated-project-use-the-following-external-paquets","title":"The generated project use the following external paquets","text":"<ul> <li>sqlalchemy</li> <li>pydantic</li> </ul>"},{"location":"templates/#django-template","title":"Django Template","text":"<p>With our Django template users are able to generate projects with the following structure:</p> <pre><code>output/\n\u251c\u2500\u2500 project_name\n\u2502   \u251c\u2500\u2500 project_name_api/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 serializers.py\n\u2502   \u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2502   \u251c\u2500\u2500 views.py\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 asgi.py\n\u2502   \u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2502   \u251c\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <ul> <li><code>config/</code>: directory is the actual Python package for your project.</li> <li><code>manage.py</code>: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.</li> <li><code>project_name_api/migrations</code>: The directory that will contain project's migrations.</li> <li><code>project_name_api/admin.py</code>: This will contain the administration for the app.</li> <li><code>project_name_api/apps.py</code>: This content our app configurations.</li> <li><code>project_name_api/models.py</code>: Our models are located in this file.</li> <li><code>project_name_api/serializers.py</code>: This has the differents serializers (one for each model).</li> <li><code>project_name_api/tests.py</code>: This will containts the tests for our api's endpoints.</li> <li><code>project_name_api/urls.py</code>: This contains the urls definition od ours endpoints.</li> <li><code>project_name_api/views.py</code>: This will contains ours views.</li> </ul>"},{"location":"templates/#the-generated-project-use-the-following-external-paquets_1","title":"The generated project use the following external paquets","text":"<ul> <li>django</li> <li>django rest framework</li> </ul>"},{"location":"templates/#flask-template","title":"Flask Template","text":"<p>With our Flask template users are able to generate projects with the following structure:</p> <pre><code>output/\n\u251c\u2500\u2500 project_name/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500__init__.py\n\u2502   \u2502   \u251c\u2500\u2500ressouce/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fields.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 parsers.py\n\u2502   \u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <ul> <li><code>models.py</code>: contains de definition of our models.</li> <li><code>api</code>: folder contains differents folder(one for each resource) and each of these folders has:<ul> <li><code>controllers.py</code>: The controllers for the resource.</li> <li><code>fields.py</code>: The fields for the ressource.</li> <li><code>parsers.py</code>: The parsers for the resource.</li> </ul> </li> <li><code>api/__init__.py</code>: This is where the api is initialized as Blueprint.</li> <li><code>__init__.py</code>: the is where the Flask app itself is initialized.</li> <li><code>manage.py</code>: This is a cli tool to manage database migration in app.</li> <li><code>Dokerfile</code>: the Dockerfile manifest to build the app as docker image.</li> </ul>"},{"location":"templates/#the-generated-project-use-the-following-external-paquets_2","title":"The generated project use the following external paquets","text":"<ul> <li>Flask-SqlAlchemy</li> <li>Flask-Bcrypt</li> <li>Flask-Migrate</li> <li>Flask-RESTful</li> <li>Flask-Cors</li> <li>Flask-JWT-Extended</li> </ul>"},{"location":"templates/#expressjs-template","title":"Express.Js Template","text":"<p>With our Express template users are able to generate projects with the following structure:</p>"}]}